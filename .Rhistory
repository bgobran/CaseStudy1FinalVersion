sn50     # standard dev. of the 5,000 means from the normal distribution of 50 samples
se10     # standard dev. of the 5,000 means from the exponential distribution of 10 samples
se50     # standard dev. of the 5,000 means from the exponential distribution of 50 samples
#
# Loop is the number of samples
#     Determine the vector for each sample
#     Determine the mean for each vector
#
for (i in 1:numsamp) {
xn10 <- rnorm(sample1, mu, sigma)
xn50 <- rnorm(sample2, mu, sigma)
ye10 <- rexp(sample1)
ye50 <- rexp(sample2)
meann10[i] <- mean(xn10)
meann50[i] <- mean(xn50)
meane10[i] <- mean(xe10)
meane50[i] <- mean(xe50)
}
#
# Determine the properties (means and standard deviations) of the 5,000 means
#
yn10 <- mean(meann10)
yn50 <- mean(meann50)
ye10 <- mean(meane10)
ye50 <- mean(meane50)
sn10 <- sd(meann10)
sn50 <- sd(meann50)
se10 <- sd(meane10)
se50 <- sd(meane50)
#
# print the means
#
yn10
yn50
ye10
ye50
#################################################################################
#
# There are two parts to the Central Limit Theorem that this program will
#     prove:
#
#  1. The mean of the means of the samples is the mean of the population
#  2. The standard deviation of the means of the samples is the standard
#          deviation of the population divided by the square root of the
#          sample size
#
# We will test this with normal and exponential distributions with two
#     different sample sizes each (i.e., four cases)
#
# For the normal distributions, we will use a mean of 10 and a standard
#     deviation of 2.
#
# The sample sizes we will take are 10 and 50
# In all cases, we will take 5,000 samples
#
#
#################################################################################
#
# Initialize the parameters
#
mu       <- 10    # mean of the distributions (populations)
sigma    <- 2     # standard deviation of the distributions (populations)
sample1  <- 10    # first sample size
sample2  <- 50    # second sample size
numsamp  <- 5000  # number of samples
meann10  <- numeric(numsamp)     # means for the normal distribution of 10 samples
meann50  <- numeric(numsamp)     # means for the normal distribution of 50 samples
meane10  <- numeric(numsamp)     # means for the exponential distribution of 10 samples
meane50  <- numeric(numsamp)     # means for the exponential distribution of 50 samples
#
# Define the vectors of samples
#
# xn10     # vector of 10 samples from the normal distribution
# xn50     # vector of 50 samples from the normal distribution
# xe10     # vector of 10 samples from the exponential distribution
# xe50     # vector of 50 samples from the exponential distribution
#
# Define the properties of the sets of 5,000 samples
#
# yn10     # mean of the 5,000 means from the normal distribution of 10 samples
# yn50     # mean of the 5,000 means from the normal distribution of 50 samples
# ye10     # mean of the 5,000 means from the exponential distribution of 10 samples
# ye50     # mean of the 5,000 means from the exponential distribution of 50 samples
# sn10     # standard dev. of the 5,000 means from the normal distribution of 10 samples
# sn50     # standard dev. of the 5,000 means from the normal distribution of 50 samples
# se10     # standard dev. of the 5,000 means from the exponential distribution of 10 samples
# se50     # standard dev. of the 5,000 means from the exponential distribution of 50 samples
#
# Loop is the number of samples
#     Determine the vector for each sample
#     Determine the mean for each vector
#
for (i in 1:numsamp) {
xn10 <- rnorm(sample1, mu, sigma)
xn50 <- rnorm(sample2, mu, sigma)
ye10 <- rexp(sample1)
ye50 <- rexp(sample2)
meann10[i] <- mean(xn10)
meann50[i] <- mean(xn50)
meane10[i] <- mean(xe10)
meane50[i] <- mean(xe50)
}
#
# Determine the properties (means and standard deviations) of the 5,000 means
#
yn10 <- mean(meann10)
yn50 <- mean(meann50)
ye10 <- mean(meane10)
ye50 <- mean(meane50)
sn10 <- sd(meann10)
sn50 <- sd(meann50)
se10 <- sd(meane10)
se50 <- sd(meane50)
#
# print the means
#
yn10
yn50
ye10
ye50
mu       <- 10    # mean of the distributions (populations)
sigma    <- 2     # standard deviation of the distributions (populations)
sample1  <- 10    # first sample size
sample2  <- 50    # second sample size
numsamp  <- 5000  # number of samples
meann10  <- numeric(numsamp)     # means for the normal distribution of 10 samples
meann50  <- numeric(numsamp)     # means for the normal distribution of 50 samples
meane10  <- numeric(numsamp)     # means for the exponential distribution of 10 samples
meane50  <- numeric(numsamp)     # means for the exponential distribution of 50 samples
#
# Define the vectors of samples
#
# xn10     # vector of 10 samples from the normal distribution
# xn50     # vector of 50 samples from the normal distribution
# xe10     # vector of 10 samples from the exponential distribution
# xe50     # vector of 50 samples from the exponential distribution
#
# Define the properties of the sets of 5,000 samples
#
# yn10     # mean of the 5,000 means from the normal distribution of 10 samples
# yn50     # mean of the 5,000 means from the normal distribution of 50 samples
# ye10     # mean of the 5,000 means from the exponential distribution of 10 samples
# ye50     # mean of the 5,000 means from the exponential distribution of 50 samples
# sn10     # standard dev. of the 5,000 means from the normal distribution of 10 samples
# sn50     # standard dev. of the 5,000 means from the normal distribution of 50 samples
# se10     # standard dev. of the 5,000 means from the exponential distribution of 10 samples
# se50     # standard dev. of the 5,000 means from the exponential distribution of 50 samples
#
# Loop is the number of samples
#     Determine the vector for each sample
#     Determine the mean for each vector
#
for (i in 1:numsamp) {
xn10 <- rnorm(sample1, mu, sigma)
xn50 <- rnorm(sample2, mu, sigma)
xe10 <- rexp(sample1)
xe50 <- rexp(sample2)
meann10[i] <- mean(xn10)
meann50[i] <- mean(xn50)
meane10[i] <- mean(xe10)
meane50[i] <- mean(xe50)
}
#
# Determine the properties (means and standard deviations) of the 5,000 means
#
yn10 <- mean(meann10)
yn50 <- mean(meann50)
ye10 <- mean(meane10)
ye50 <- mean(meane50)
sn10 <- sd(meann10)
sn50 <- sd(meann50)
se10 <- sd(meane10)
se50 <- sd(meane50)
#
# print the means
#
yn10
yn50
ye10
ye50
sn10
sn50
se10
se50
library(repmis)
library(repmis)
rm testdata
rm(testdata)
rm(sortHL.testdata)
quit()
mu       <- 10    # mean of the distributions (populations)
sigma    <- 2     # standard deviation of the distributions (populations)
erate    <- 0.1   # exponential distribution rate
sample1  <- 10    # first sample size
sample2  <- 500    # second sample size
numsamp  <- 5000  # number of samples
meanns1  <- numeric(numsamp)     # means for the normal distribution of sample1 samples
meanns2  <- numeric(numsamp)     # means for the normal distribution of sample2 samples
meanes1  <- numeric(numsamp)     # means for the exponential distribution of sample1 samples
meanes2  <- numeric(numsamp)     # means for the exponential distribution of sample2 samples
#
# Define the vectors of samples
#
# xns1     # vector of sample1 samples from the normal distribution
# xns2     # vector of sample2 samples from the normal distribution
# xes1     # vector of sample1 samples from the exponential distribution
# xes2     # vector of sample2 samples from the exponential distribution
#
# Define the properties of the sets of 5,000 samples
#
# yns1     # mean of the 5,000 means from the normal distribution of sample1 samples
# yns2     # mean of the 5,000 means from the normal distribution of sample2 samples
# yes1     # mean of the 5,000 means from the exponential distribution of sample1 samples
# yes2     # mean of the 5,000 means from the exponential distribution of sample2 samples
# sns1     # standard dev. of the 5,000 means from the normal distribution of sample1 samples
# sns2     # standard dev. of the 5,000 means from the normal distribution of sample2 samples
# ses1     # standard dev. of the 5,000 means from the exponential distribution of sample1 samples
# ses2     # standard dev. of the 5,000 means from the exponential distribution of sample2 samples
#
# Loop is the number of samples
#     Determine the vector for each sample
#     Determine the mean for each vector
#
for (i in 1:numsamp) {
xns1 <- rnorm(sample1, mu, sigma)
xns2 <- rnorm(sample2, mu, sigma)
xes1 <- rexp(sample1, erate)
xes2 <- rexp(sample2, erate)
meanns1[i] <- mean(xns1)
meanns2[i] <- mean(xns2)
meanes1[i] <- mean(xes1)
meanes2[i] <- mean(xes2)
}
#
# Determine the properties (means and standard deviations) of the 5,000 means
#
yns1 <- mean(meanns1)
yns2 <- mean(meanns2)
yes1 <- mean(meanes1)
yes2 <- mean(meanes2)
sns1 <- sd(meanns1)
sns2 <- sd(meanns2)
ses1 <- sd(meanes1)
ses2 <- sd(meanes2)
#
# print the means compared to what we expected
#
message ("These two normal distribution means should be ", mu)
message ("They are ", round(yns1,4), " and ", round(yns2,4))
message ("These two exponential distribution means should be ", round(1/erate,4))
message ("They are ", round(yes1,4), " and ", round(yes2,4))
#
# print the standard deviations compared to what we expected
#
message ("These two normal distribution standard deviataions should be ", round(sigma/sqrt(sample1),4), " and ", round(sigma/sqrt(sample2),4))
message ("They are ", round(sns1,4), " and ", round(sns2,4))
message ("These two exponential distribution standard deviataions should be ", round(1/(erate*sqrt(sample1)),4), " and ", round(1/(erate*sqrt(sample2)),4))
message ("They are ", round(ses1,4), " and ", round(ses2,4))
#################################################################################
log(10)
log(e)
log(2.71)
log10(10)
log(-10)
sqrt(10)
x <- rnorm(15)
mean(x)
sd(x)
y <- rnorm(15, 10, 2)
mean(y)
sd(y)
sqrt(10)
y <- rnorm(500,10,2)
mean(y)
sd(y)
weights <- c(60, 72, 57, 90, 95, 72)
heights <- c(1.80, 1.85, 1.72, 1.90. 1.74. 1.91)
# 3. d.
plot(weights,heights)
weights <- c(60, 72, 57, 90, 95, 72)
heights <- c(1.80, 1.85, 1.72, 1.90, 1.74, 1.91)
# 3. d.
plot(weights,heights)
plot(heights, weights)
weight <- c(60, 72, 57, 90, 95, 72)
height <- c(1.80, 1.85, 1.72, 1.90, 1.74, 1.91)
# 3. d.
plot(height, weight)
#
# There is no real trend to this data. BUT, if we could throw out
#     two of the samples, we could probably put a quadratic equation
#     through the remaining points.
#
# 3. e.
BMI <- weight/(height**2)
BMI
weight <- c(60, 72, 57, 90, 95, 72)
height <- c(1.80, 1.85, 1.72, 1.90, 1.74, 1.91)
# 3. d.
plot(height, weight)
#
# There is no real trend to this data. BUT, if we could throw out
#     two of the samples, we could probably put a quadratic equation
#     through the remaining points.
#
# 3. e.
BMI <- weight/(height**2)
# 3. f.
weight_mean <- mean(weight)
# 3. g.
weight_variances <- weight- weight_mean
# 3. h.
sum(weight_variances)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
df
Categories <- c("Computer Programming", "Math", "Statistics", "Machine Learning", "Oil and Gas Domain", "Communication and Presentation Skills", "Data Visualization")
Ranking <- c(2, 3, 2, 1, 4, 4, 3)
Brian <- data.frame(Categories, Ranking)
Brian
Category <- c("Computer Programming", "Math", "Statistics", "Machine Learning", "Oil and Gas Domain", "Communication and Presentation Skills", "Data Visualization")
Ranking <- c(2, 3, 2, 1, 4, 4, 3)
Brian <- data.frame(Category, Ranking)
Brian
barplot(Brian$ranking, main=Brian$Category)
barplot(Ranking, main=Category)
barplot(Ranking, main=Category,xlab=Category)
barplot(Ranking, main=Category,xlab=Category,horz=TRUE)
barplot(Ranking, main=Category,xlab=Category,horiz=TRUE)
barplot(Ranking, main=Category,names.arg=Category)
barplot(Ranking, main=Category,names.arg=Category, las=2)
barplot(Ranking, names.arg=Category, las=2)
#################################################################################
#
# Live Session 4 Assignment
#
#################################################################################
#
# 1 Basic Math
#
log(10)      # 1. a. log of a positive number
# the log base is e
log10(10)    # 1. b. log of 10 using a different base
log(-10)
# 1. c. logarithms of 0 and negative numbers are not defined (Not a Number)
sqrt(10)     # 1. d. square root of a positive number
#
# 2. Random number generation
#
# 2. a.
x <- rnorm(15)
mean(x)
sd(x)
# 2. b.
y <- rnorm(15, 10, 2)
mean(y)
sd(y)
#
# 2. c. The means and standard deviations are different because we are taking too
#       few samples to accurately represent the distribution
#
#
# 3. Vector operations
#
# 3. c.
weight <- c(60, 72, 57, 90, 95, 72)
height <- c(1.80, 1.85, 1.72, 1.90, 1.74, 1.91)
# 3. d.
plot(height, weight)
#
# There is no real trend to this data. BUT, if we could throw out
#     two of the samples, we could probably put a quadratic equation
#     through the remaining points.
#
# 3. e.
BMI <- weight/(height**2)
BMI
# 3. f.
weight_mean <- mean(weight)
weight_mean
# 3. g.
weight_variances <- weight- weight_mean
weight_variances
# 3. h.
sum(weight_variances)
#
# 4. Create a data frame of our data science profile
#       and a bar graph of it
#
Category <- c("Computer Programming", "Math", "Statistics", "Machine Learning", "Oil and Gas Domain", "Communication and Presentation Skills", "Data Visualization")
Ranking <- c(2, 3, 2, 1, 4, 4, 3)
Brian <- data.frame(Category, Ranking)
Brian
barplot(Ranking, names.arg=Category, las=2)
setwd("~/Documents/SMU Classes/03_Data_Science/CaseStudy1/Working_Directory")
setwd("~/Documents/SMU Classes/03_Data_Science/CaseStudy1/Working_Directory")
source("init.R")
source("gatherGDP.R")
source("gatherEDU.R")
source("tidyGDP.R")
source("tidyEDU.R")
source("merge.R")
source("Question1.R")
source("Question2.R")
source("Question3.R")
source("Question4.R")
ggplot(mergedSorted, aes(x=GDPRanking,y=GDPDollar))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + xlim(0,200) +
geom_point(aes(colour=IncomeGroup),size=3) + annotation_logticks(sides="l",scaled=FALSE) +
theme(panel.grid.minor.y = element_blank())
source("Question4.R")
str(mergedSorted)
source("Question5.R")
debug <- 0
source("merge.R")
source("Question1.R")
source("Question2.R")
source("Question3.R")
source("Question4.R")
source("Question5.R")
setwd("~/Documents/SMU Classes/03_Data_Science/CaseStudy1/Working_Directory")
source("init.R")
debug <- 0
source("gatherGDP.R")
source("gatherEDU.R")
source("tidyGDP.R")
source("tidyEDU.R")
source("merge.R")
source("Question1.R")
source("Question2.R")
source("Question3.R")
source("Question4.R")
source("Question5.R")
source("Question4.R")
ggplot(mergedSorted, aes(x=GDPRanking,y=GDPDollar))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + xlim(0,200) +
geom_point(aes(colour=IncomeGroup),size=3) + annotation_logticks(sides="l",scaled=FALSE) +
theme(panel.grid.minor.y = element_blank())
setwd("~/Documents/SMU Classes/03_Data_Science/CaseStudy1/Working_Directory")
source("init.R")
source("gatherGDP.R")
source("gatherEDU.R")
source("tidyGDP.R")
source("tidyEDU.R")
source("merge.R")
source("Question1.R")
source("Question2.R")
source("Question3.R")
source("Question4.R")
source("Question5.R")
source("init.R")
source("gatherGDP.R")
source("gatherEDU.R")
source("tidyGDP.R")
source("tidyEDU.R")
source("merge.R")
source("Question1.R")
source("Question2.R")
source("Question3.R")
source("Question4.R")
source("Question5.R")
ls()
q()
?source
source("merge.R",echo=TRUE)
```{r echo=FALSE}
ggplot(mergedSorted, aes=(x=GDPRanking, fill=IncomeGroup)) + geom_histogram(binwidth=0.55)
ggplot(mergedSorted, aes=(x=GDPRanking fill=IncomeGroup)) + geom_histogram(binwidth=0.55)
ggplot(mergedSorted, aes=(x=GDPRanking, fill=IncomeGroup)) + geom_histogram(binwidth=0.55)
```{r echo=FALSE}
source("analysis/init.R")
source("data/gatherGDP.R")
source("data/gatherEDU.R")
source("data/tidyGDP.R")
source("data/tidyEDU.R")
source("data/merge.R")
source("analysis/Question1.R")
source("analysis/Question2.R")
source("analysis/Question3.R")
source("analysis/Question4.R", print.eval=TRUE)
source("analysis/Question5.R", print.eval=TRUE)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram(aes(colour=IncomeGroup))
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram(aes(colour=IncomeGroup),binwidth=1)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram(aes(colour=IncomeGroup)) + stat_bin(binwidth=1)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram(aes(colour=IncomeGroup)) + stat_bin(breaks=1:200)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram() + stat_bin(breaks=1:200)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram()
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram() + stat_bin(bbreaks=1:189)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram() + stat_bin(breaks=1:189)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram() + stat_bin(breaks=1:190)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram() + stat_bin(bins=190)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram(bins=190)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram(binwidth=1)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_histogram(binwidth=1)
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_density
ggplot(mergedSorted, aes=(x=GDPRanking)) + geom_density()
ggplot(mergedSorted, aes=(x=IncomeGroup,y=GDPRanking))
ggplot(mergedSorted, aes=(x=IncomeGroup,y=GDPRanking)) + geom_point()
ggplot(mergedSorted, aes=(x=IncomeGroup, y=GDPRanking)) + geom_point()
ggplot(mergedSorted, aes=(x=IncomeGroup  y=GDPRanking)) + geom_point()
ggplot(mergedSorted  aes=(x=IncomeGroup  y=GDPRanking)) + geom_point()
ggplot(mergedSorted,  aes=(x=IncomeGroup,  y=GDPRanking)) + geom_point()
ggplot(mergedSorted,  aes=(x=IncomeGroup,  y=GDPRanking)) + geom_histogram()
ggplot(mergedSorted, aes(x=GDPRanking,y=GDPDollar))  + scale_y_continuous(trans=log10_trans(), breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) + xlim(0,200) +
geom_point(aes(colour=IncomeGroup),size=3) + annotation_logticks(sides="l",scaled=FALSE) +
theme(panel.grid.minor.y = element_blank())
ggplot(mergedSorted,  aes=(x=IncomeGroup,  y=GDPRanking)) + geom_histogram()
ggplot(mergedSorted, aes(x=GDPRanking, fill=IncomeGroup)) + geom_density(alpha=.3)
?source
